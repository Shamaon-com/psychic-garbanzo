


type User @model
  @auth(rules: [
    { allow: groups, groups: ["admins"], queries: [get, list], mutations: [create, update, delete] },
    { allow: owner, ownerField: "username", operations: [read] }
  ]) {
  id: ID!
  username: String!
  email: String! 
  banned: Boolean
  disabled: Boolean
}

type Agenda
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins"]
				queries: [get, list]
				mutations: [create, update, delete]
			}
			{
				allow: groups
				groups: ["users"]
				queries: [get, list]
				mutations: [create]
			}
		]
	) {
	id: ID!
	title: String!
	description: String
	date: String!
}

type Evento
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins"]
				queries: [get, list]
				mutations: [create, update, delete]
			}
			{
				allow: groups
				groups: ["users"]
				queries: [get, list]
				mutations: [create]
			}
		]
	){
		id: ID!
		url: String!
		title: String!
		startDate: String!
		endDate: String!
		chat: Boolean!
		questions: Boolean!
		allowed: Boolean!
		image: String!
		messages: [Message] @connection(keyName: "byMessage", fields: ["id"])
		questionsData: [Question] @connection(keyName: "byQuestion", fields: ["id"])

	}

type Message
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins"]
				queries: [get, list]
				mutations: [create, delete]
			}
			{
				allow: groups
				groups: ["users"]
				queries: [get, list]
				mutations: [create]
			}
		]
	)
	@key(name: "byMessage", fields: ["eventoId", "user", "message"]) { 
	id: ID!
	eventoId: ID!
	user: String!
	message: String!
}

type Question
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins", "ponentes"]
				queries: [get, list]
				mutations: [delete]
			}
			{ allow: groups, groups: ["users"], mutations: [create] }
		]
	) 
	@key(name: "byQuestion", fields: ["eventoId", "user", "question"]) { 
		id: ID!
		eventoId: ID!
		user: String!
		question: String!
	}

type GeneralSettings
  @model
    @aws_iam
	@aws_cognito_user_pools
    @auth(
    rules: [
      { allow: groups, groups: ["admins"], queries: [get, list], mutations: [create, update, delete] }
	  { allow: groups, groups: ["users", "ponentes", "moderators"], queries: [get, list]}
	  { allow: public, provider: iam, queries: [get, list] }

    ]
  ) {
  id: ID!
  login: String!
  mainLogo: String!
  backgroundLoginImage: String!
  backgroundColor: String!
  boxBackgroundColor: String!
  boxBorderColor: String!
  boxInnerTextColor: String!
  boxTitleColor: String!
  titleColor: String!
  textColor: String!
  pageAgenda: Boolean!
  pagePonentes: Boolean!
  pagePatrocinadores: Boolean!
  pageRecursos: Boolean! 
  pageContacto: Boolean!
}

type Ponente
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins"]
				queries: [get, list]
				mutations: [create, update, delete]
			}
			{
				allow: groups
				groups: ["users"]
				queries: [get, list]
				mutations: [create]
			}
		]
	) {
	id: ID!
	name: String!
	title: String!
	image: String!
	pdf: String
	url: String
}

type Patrocinador
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins"]
				queries: [get, list]
				mutations: [create, update, delete]
			}
			{
				allow: groups
				groups: ["users"]
				queries: [get, list]
				mutations: [create]
			}
		]
	) {
	id: ID!
	name: String!
	link: String!
	file: String
}

type Recurso
	@model
	@auth(
		rules: [
			{
				allow: groups
				groups: ["admins"]
				queries: [get, list]
				mutations: [create, update, delete]
			}
			{
				allow: groups
				groups: ["users"]
				queries: [get, list]
				mutations: [create]
			}
		]
	) {
	id: ID!
	type: String!
	name: String!
	text: String!
	file: String
	videoUrl: String
}